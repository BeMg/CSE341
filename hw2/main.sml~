(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(* put your solutions for problem 1 here *)

fun all_except_option (patten, target) =
  let
      fun check (patten, target) =
	case (patten, target) of
	    (p, []) => false
	  | (p, t::other) => if same_string(p, t)
			     then true
			     else check(p, other);
      fun get (patten, target) =
	case (patten, target) of
	    (p, []) => []
	  | (p, t::other) => if same_string(p, t)
			     then other
			     else t::get(p, other);
  in
      if check(patten, target)
      then SOME (get(patten, target))
      else NONE
  end
      
fun get_substitutions1 (s, patten) =
  case (s, patten) of
      ([], p) => []
    | (t::other, p) => case all_except_option(p, t) of
			   NONE => get_substitutions1(other, p)
			 | SOME res => res @ get_substitutions1(other, p)

fun get_substitutions2 (s, patten) =
  let
      fun subf(s, patten, ans) =
	case (s, patten, ans) of
	    ([], p, ans) => ans
	  | (t::other, p, ans) => case all_except_option(p, t) of
				      NONE => subf(other, p, ans)
				    | SOME res => subf(other, p, res @ ans)
  in
      subf(s, patten, [])
  end

fun similar_names (str, name) =
  let
      val {first=x, middle=y, last=z} = name;
  in
      x ^ " " y ^ " " ^ z
  end
      
(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)
