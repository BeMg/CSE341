
#lang racket

(provide (all-defined-out)) ;; so we can put tests in a second file

;; Helper functions
(define ones (lambda () (cons 1 ones)))
(define a 2)

;; put your code below

(define (sequence low high stride)
  (cond [(> low high) '()]
        [(= low high) (cons low null)]
        [(< low high) (cons low (sequence (+ low stride) high stride))]))

(define (string-append-map xs suffix)
  (map (lambda (s) (string-append s suffix)) xs))

; I don't understand the problem. In test (list-nth-mod (list 0 1 2 3 4) 2) -> 2, but 5%2==1 the first element in (0, 1, 2 ,3 ,4)
; should be 1 ?
; Now the code is match sample test, but not match my mind.
(define (list-nth-mod xs n)
  (cond [(= (length xs) 0) (error "list-nth-mod: empty list")]
        [(< n 0) (error "list-nth-mod: negative number")]
        [#t (car (list-tail xs (+ (remainder (length xs) n) 1)))]))

(define (stream-for-n-steps s n)
  (let ([tmp_rst (s)])
    (cond [(= n 0) '()]
          [#t (cons (car tmp_rst) (stream-for-n-steps (cdr(s)) (- n 1)))])))

(define (funny-number-stream)
  (letrec ([f (lambda (x) (cond [(= 0 (remainder x 5)) (cons (- 0 x) (lambda () (f (+ x 1))))]
                             [#t (cons x (lambda () (f (+ x 1))))]))])
        (f 1)))

(define (dan-then-dog)
  (letrec ([for_dan (lambda () (cons "dan.jpg" (lambda () (for_dog))))]
           [for_dog (lambda () (cons "dog.jpg" (lambda () (for_dan))))])
    (for_dan)))

(define (stream-add-zero s)
  (lambda () (cons (cons 0 (car (s))) (stream-add-zero (cdr (s))))))

(define (cycle-lists xs ys)
  )

(define (vector-assoc v vec)
  0)

(define (cached-assoc xs n)
  0)